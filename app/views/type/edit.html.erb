<script language="javascript" type="text/javascript">
// EBYDict stuff

// the following is a bit of generated JS prepared by the typing controller
<%= raw @parts_js %>
var canvas;
var context;
var marker;
var curpart = 0;
var curfoot = 0;
var reached_end = false;
var curimg = parts[curpart];
var curfootimg = foots[curfoot];
var humanpart;
var humanmaxpart = <%= raw @partcount %>;
var maxpart = humanmaxpart - 1;
var humanfoot;
var extra_foots = <%= raw @extra_foots %>;

function updateMarker(e) {
  var offset = $(this).offset();
  marker = e.pageY - offset.top;
  drawMarker();
  // update server
  $.ajax('<%= @marker_ajax_url %>'+"?marker_y="+marker.toString()+"&partnum="+curpart.toString()); 
}

function drawMarker() {
  context.beginPath();
  context.moveTo(0, marker);
  context.lineTo($('#myCanvas').width(),marker);
  context.stroke();
}

function updateLine(e) {
    var r = canvas.getBoundingClientRect(),
        y = e.clientY - r.top;
    
    context.drawImage(imageObj, 0, 0, canvas.width, canvas.height);
    line.x1 = 0;
    line.y1 = y;
    line.x2 = canvas.width;
    line.y2 = y;
    line.draw();
    drawMarker();
}

$(document).ready(function() {
// TinyMCE stuff
tinyMCE.init({
        selector : "textarea.mceEditor",
        toolbar: "bold undo redo charmap | makor problem comment redirect | talmud post_xazal neologism",
        directionality : "rtl",
        /*language : 'he',*/
        menubar: false,
        content_css : "/assets/application.css",
        setup: function(editor) { 
          // Add our custom buttons
          editor.addButton('makor', {
            /*text: '<%= t(:type_source) %>',*/
            image: '/assets/source.png',
            onclick: function() { 
              editor.focus();
              editor.selection.setContent('<%= t(:type_source_markup) %>'+editor.selection.getContent()+'&#93;&#93;');
            }
          });
          editor.addButton('problem', {
            //text: '<%= t(:type_problem_btn) %>',
            image: '/assets/problem.png',
            onclick: function() { 
              editor.focus();
              editor.selection.setContent('<%= t(:type_problem_markup) %>'+editor.selection.getContent()+'&#93;&#93;');
            }
          });
          editor.addButton('comment', {
            //text: '<%= t(:type_comment) %>',
            image: '/assets/comment.png',
            onclick: function() { 
              editor.focus();
              editor.selection.setContent('<%= t(:type_comment_markup) %>'+editor.selection.getContent()+'&#93;&#93;');
            }
          });
          editor.addButton('redirect', {
            //text: '<%= t(:type_redirect) %>',
            image: '/assets/vide.png',
            onclick: function() { 
              editor.focus();
              editor.selection.setContent('<%= t(:type_redirect_markup) %>'+editor.selection.getContent()+'&#93;&#93;');
            }
          });
          editor.addButton('talmud', {
            //text: '<%= t(:type_talmud) %>',
            image: '/assets/talmud.png',
            onclick: function() { 
              editor.focus();
              editor.selection.setContent('* '+editor.selection.getContent());
            }
          });
          editor.addButton('post_xazal', {
            //text: '<%= t(:type_post_xazal) %>',
            image: '/assets/post_xazal.png',
            onclick : function() {
              editor.focus();
              editor.selection.setContent('&deg;'+editor.selection.getContent());
            }
          });
          editor.addButton('neologism', {
            //text: '<%= t(:type_neologism) %>',
            image: '/assets/neologism.png',
            onclick : function() {
              editor.focus();
              editor.selection.setContent('&sect;'+editor.selection.getContent());
            }
          });
          editor.on('change', function(e) {
            var content = tinymce.activeEditor.getContent().replace(/<p>|<\/p>/g, '');
            if (content == '') {
              tinymce.activeEditor.setContent($('#' + editor.id).attr("placeholder"));
            }  
          });
          // set initial placeholder if empty
          var placeholder = $('#' + editor.id).attr("placeholder");
          if(placeholder.length) {
            editor.on('init', function(e) {
              var cont = editor.getContent();
              if (cont.length == 0) {
                editor.setContent(placeholder);
              }
            });
          }
    },
// remnants of TinyMCE 3.x code below -- remove when sure no longer needed
/*  setup : function(ed) {
    // Set placeholder
    var tinymce_placeholder = $('#' + ed.id);
    if (tinymce_placeholder.length) {
      ed.onMouseDown.add(function (ed, e) {
        var content = ed.getContent().replace(/<p>|<\/p>/g, '');
        if (content == tinymce_placeholder.attr("placeholder")) {
          ed.setContent('');
        }
      });
    }
    }*/
    }
  );
  canvas = document.getElementById("myCanvas");
  context = canvas.getContext("2d");
  imageObj = new Image();

  imageObj.onload = function() { 
    context.drawImage(imageObj, 0,0);  
  }
  $('#myCanvas').click(updateMarker);
  line = new Line(context);
  canvas.onmousemove = updateLine;
 
  <% if @thedef.marker.nil? %>
    chimg(0);
  <% else %>
    chimg(<%= @thedef.marker.partnum - 1 %>); // partnums start at one
    marker = <%= @thedef.marker.marker_y %>;
    drawMarker();
  <% end %>    
  $(".dialog").hide();
  
  $("#instructions").dialog({
      modal: true,
      title: '<%= t(:type_instructions_title) %>',
      overlay: {opacity: 0.5, background: "black" },
      width:790,
      height:580,
      show:"blind",
      hide:"blind",
      resizable:true,
      autoResize:true,
      autoOpen:false,
      open: function(event, ui) {
        $("body").css({ overflow: 'hidden' })
      },
      beforeClose: function(event, ui) {
        $("body").css({ overflow: 'inherit' })
      }
    });
  $("#not_done").dialog({
    modal: true,
    title: '<%= t(:type_not_done) %>',
    overlay: {opacity: 0.5, background: "black" },
    width:450,
    autoResize:true,
    autoOpen:false,
    open: function(event, ui) {
      $("body").css({ overflow: 'hidden'})
    },
    beforeClose: function(event, ui) {
      $("body").css({ overflow: 'hidden'})
    }
  });
  $('.instructions_button').click(function() { 
  $('#instructions').show().dialog("open");
    });
  $("#edit_form").submit(function() {
    if ($(this).data('clicked').is('[name=save_and_done]') && !reached_end) {
      $('#not_done').show().dialog("open");
      return false;
    }
    return true;
  });
  $('form').click(function(event) {
      $(this).data('clicked',$(event.target))
  });
});
</script><style type="text/css">

.dialog
{
  background: #EEE;
  padding: 10px;
  border:1px solid #000000;
  overflow-y: auto; 
}
.ui-dialog-titlebar-close
{
  display: block;
  position: absolute;
  right: 12px;
  top: 11px;
  height: 20px;
  width: 20px;
  background-color: #4B5667;
  font-size: 0px;
  border: 1px solid #9D9D9D;
}

.ui-dialog-titlebar
{
  display: block;
  height: 40px;
  background: #4F4F4F;
  border-width:1px 1px 0px 1px;
  border-color:#000000;
  border-style:solid;
  color: #E5E5E5;
  text-align: center;
  font: 21px/42px "Arial Black";
  cursor: move;
}

.ui-widget-overlay
{
  opacity: .7;
  filter: alpha(opacity=70);
  -moz-opacity: 0.70;
  position: absolute;
  top: 0;
  left:0;
  background:#000000;
  padding: 10px;
}
.controls {
  position:fixed;
  top:2px;
  left:0px;
  width:400px;
  overflow:auto;
  padding-right:2px;
  border-right:4px gray solid;
  overflow-y:auto;
  height:100vh;
}
.scans {
  /*float:right;*/
  margin-left:400px;
  top:2px;
  width:auto;
/*  max-width: 800px; */
  overflow-x:scroll;
  overflow-y:auto;
}

</style><%= form_tag '/type/processtype/'+@thedef.id.to_s, { :id => 'edit_form' } %> 
<!-- instructions popup --> 
<div id="instructions" class="dialog" style="display:none; overflow:auto;  direction:rtl; text-align:right;" title="<%= t(:type_instructions_title) %>">
<%= t(:type_instructions_body_html) %>
</div>
<!-- not done with all def parts warning dialog -->
<div id="not_done" class="dialog" style="display:none; overflow:auto; direction:rtl; text-align:right;">
<%= t(:type_not_done_body_html) %>
</div>
 <!-- main editing area -->
<!-- <table>
<tr>
<td>-->
<div class="scans">
    <div align="center"><a href="#" id="but_next" onclick="gonext()"><%= t(:type_next) %></a> | <span style="color: green" id="curpos"></span> | <a href="#" id="but_prev" onclick="goprev()"><%= t(:type_prev) %></a><span class="instructions_button" style="text-decoration: underline; cursor:pointer; color: blue;"><b><%= t(:type_show_instructions) %></b></span></div><br/>
    <canvas id="myCanvas"></canvas>
    <!--<img id="defpartimg" border="1" src="/assets/loading.png"/> --> <p/>
    <div align="center"><a href="#" id="foot_next" onclick="footnext()"><%= t(:type_nextfoots) %></a><a href="#" id="but_next2" onclick="gonext()"><%= t(:type_next) %></a> | <span style="color: green" id="curpos2"></span> | <a href="#" id="but_prev2" onclick="goprev()"><%= t(:type_prev) %></a> <a href="#" id="foot_prev" onclick="footprev()"><%= t(:type_prevfoots) %></a></div><br/>
    <a id="defpartlink" href="" target="_new"><%= t(:type_clicktoenlarge) %></a>
    <hr/>
    <img id="footimg" border="1" src="/assets/loading.png"/><p/>
</div>
<!-- </td><td> -->
<div class="controls">
  <!-- TinyMCE goes here -->
    <div>
<span style="color:green"><%= t(:type_headword) %></span><input style="font-family:David;font-size:18pt" dir="rtl" align="right" name="defhead" size="25" value="<%= h(@thedef.defhead) %>"/><br/>
      <textarea class="mceEditor" id="deftext" name="deftext" rows="10" cols="30" placeholder="<%= t(:type_text) %>"><%= h(@thedef.deftext) %></textarea> 
      <hr/>
      <hr id="helper_hr" style="display: none"/>
      <textarea class="mceEditor" id="footnotes" name="footnotes" rows="7" cols="30" placeholder="<%= t(:type_footnotes) %>"><%= h(@thedef.footnotes) %></textarea>
      <table>
	<tr><th><%= t(:type_arabic) %></th><th><%= t(:type_greek) %></th><th><%= t(:type_russian) %></th><th><%= t(:type_extra) %></th></tr>
        <tr>
          <%= @selects.html_safe %>
        </tr>
      </table><table>
        <tr><td><%= submit_tag t(:type_saveanddone, :action => @action), :name => 'save_and_done' %>
                <% if @thedef.status == 'Problem' %>
                  <select id="resolve_to" name="resolve_to">
                    <option value="NeedTyping"><%= t(:type_await_typing) %></option>
                    <option value="NeedFixup"><%= t(:type_await_fixups) %></option>
                    <option value="NeedProof" selected="selected"><%= t(:type_await_proof_round, :round => @thedef.proof_round_passed + 1) %></option>
                    <option value="NeedPublish"><%= t(:type_await_publishing) %></option>
                  </select>&nbsp;
                  <%= t(:type_inc_proof) %>
                  <%= check_box_tag 'increase_proof', '1', true %>
                  </td></tr><tr>
                <% else %>
                  </td>
                <% end %>
            <td><%= submit_tag t(:type_save_and_exit), :name => 'commit' %></td><td><%= submit_tag t(:type_save), :name => 'save' %></td></tr><tr>
        <td><%= submit_tag t(:type_abandon), :name => 'abandon' %></td>
        <td><span class="instructions_button" style="text-decoration: underline; cursor:pointer; color: blue;"><b><%= t(:type_show_instructions) %></b></span></td>
        </tr>
        <tr><td><textarea class="prob" style="font-family:David;font-size:14pt" dir="rtl" align="right" name="prob_desc" cols="15" rows="3"><%= h(@thedef.prob_desc) %></textarea></td>
        <td><%= submit_tag t(:type_problem), :name => 'problem' %></td></tr>
      </table>
    
    <% if session['user'].role_publisher %>
      <table>
        <%  @thedef.events.each {|e| %>
        <tr><td><%= link_to e.user.fullname, :controller => :user, :action => :show, :id => e.who %></td><td><%=h label_for_status(e.new_status) %></td></tr>
        <% } %>
      </table>
    <% end %>
    </div>
</div><!-- </tr></table> -->
<input type="hidden" name="act" value="<%= @actno  %>"/></form>
<script language="javascript" type="text/javascript">
function chfoot_loading() {
  $('#footimg').attr('src', '');
  $('#footimg').attr('src', '/assets/loading.png');
}
function chimg_loading() {
  imageObj.src = '/assets/loading.png';
  chfoot_loading();
}
function chimg(delta) {
  chimg_loading(); // start with the "loading..." image
  setTimeout(function() {
    actual_chimg(delta);
  }, 300);
}

function actual_chimg(delta) {
  curpart += delta;
  curfoot += delta;
  if(curpart > maxpart)
    curpart = maxpart;
  if(curpart < 0)
    curpart = 0;
  curimg = parts[curpart];
  curfootimg = foots[curfoot];
  humanpart = curpart + 1;
  var curpos = "<%= t(:type_curpos) %> "+humanpart+" <%= t(:type_out_of) %> "+humanmaxpart;
  $('#curpos').html(curpos);
  $('#curpos2').html(curpos);

  $('#defpartlink').attr('href', curimg);
  //$('#defpartimg').attr('src', curimg);
  imageObj.src = curimg;

  $('#footimg').attr('src', curfootimg);
  $('#foot_prev').hide();
  if(curpart == 0) {
    $('#but_prev').hide();
    $('#but_prev2').hide();
  }
  else {
    $('#but_prev').show();
    $('#but_prev2').show();
  }
  if(curpart == maxpart) {
    reached_end = true;
    $('#but_next').hide();
    $('#but_next2').hide();
    if(extra_foots > 0)
      $('#foot_next').show();
  }
  else {
   $('#foot_next').hide();
   $('#but_next').show();
   $('#but_next2').show();
  }
}

function chfoot(delta) {
  chfoot_loading(); // start with the "loading..." image
  setTimeout(function() {
    actual_chfoot(delta);
  }, 300);

}
function actual_chfoot(delta) {
  curfoot += delta;
  if(curfoot == maxpart) {
    $('#foot_prev').hide();
    chimg(0); // we're back where def parts are available, so delegate
  }
  else { // we are beyond the def parts
   if(curfoot == maxpart + extra_foots) {
     $('#foot_next').hide();
   } else {
     $('#foot_next').show();
   }
   $('#foot_prev').show();
   $('#but_prev').hide();
   $('#but_prev2').hide();
   curfootimg = foots[curfoot]; 
   $('#footimg').attr('src', curfootimg);
  }
}

function gonext(e) {
  chimg(1);
}
function goprev(e) {
  chimg(-1);
}

function footnext(e) {
  chfoot(1);
}
function footprev(e) {
  chfoot(-1);
}

</script>

