To-Do
-----

==high priority==
+ add instructions page
- the GotOrphans status never gets part_def'd (!) (enough to just include it in part_def work assignment?)
- monthly e-mail to (only active?) volunteers
- don't show "next footnote" link when there are _definitely_ no next footnotes (i.e. the foot array is < 2)
- handle WIDE footnotes
- implement user#edit to give users (esp. after omniauth!) specific permissions
- add call to volunteer in fulldict
- implement referrals as links if possible.  anchor mode for fulldict, direct link otherwise.
- render comments as colored asterisks (or something) with tooltips or floating boxes when clicked

==medium priority==
- BUG: handle footnotes within markup.  E.g. http://ebydict.benyehuda.org/definition/view/3741

- re-layout action buttons, prob. as an action dialog.
- add user management
  - user preferences page (change password, what else?)
  - Forgot-my-password handling
- improve definition view: 
  + clearly demarcate footnotes
  - translate redirects
  - font
  - container
- add 'proof_round_passed' to eby_def_events, then fix status code and publisher view in typing 
- design and implement final definition browsing
- design and implement final definition view
- design and implement a clever search mechanism (precise with nikkud, stripping nikkud, perhaps matching partial nikkud, perhaps even with errors?)

==low priority==
- run 'bundle exec rake notes' and handle code annotated issues
- update deployment instructions, document canonical deployment set-up
- Improve partitioning views
- keyboard-based scrolling?
- auto-linkify references to Bible/Talmud/etc., based on Wikisource-like templates, to be added at typing or proofing time.
- source-validation system
  - source extractor script/task (per completed volume? for economy of scale!)
    - clever handling of ibid.!
  - list source res per source book (e.g. all citations from Leviticus)
    - per source, attempt to auto-generate a link
    - per ref, mark valid/invalid auto-link, and valid/invalid citation
      - offer corrected citation (properly marked as PBY emendation)
- convert remaining ERB to HAML
==done==
+ implement publishing

+ warn before save_and_done if not all def parts were viewed
+ add button for 'save now' without exit
+ fix font issue that strips bottom of bottom diacritics
+ one does not proof one's own work.  Each user may only be involved with a definition in exactly ONE phase of typing/proofing.  TBD: what about fixups?
+ localize status names
+ add user stats to user's dashboard
+ make user management and recent-changes visible on the dashboard for admins
+ add buttons for the period markers used by EBY -- http://he.wikipedia.org/wiki/%D7%A7%D7%95%D7%91%D7%A5:BYarticle_sign.png
+ auto-assign a scan instead of list
+ IE 7/8 support for typing interface (switched to HTML5 canvases)

==old stuff==

Typing Flow:
------------
+ typist types.  
  + footnotes are typed in separate box 
  - (some notation format to be converted on dict. rendering? TBD!)
  - special symbols are easy to insert via toolbar, including arbitrary character (by Unicode number)
  * special meta-markers are easy to insert, e.g. <russian-here>, <illegible-text-here>, <sic>, etc.

+ typist can switch to next column's column-foot-image as many times as they like, without losing their typing (AJAX)
+ typist submits the def, specifying:
  - completed typing but needs foreign-language inserts or unclear-words inserts  (typist is prompted to MARK the needed inserts somehow)
    - def is saved, changes status to NEED_FIXUP, and is UNASSIGNED

Fixups Flow:
------------
- fixer-upper gets same interface typist gets (in terms of images displayed, scrolling for next footnotes image, etc.), possibly with more instructions

Proofing Flow:
--------------
- proofers can initiate proofing at level N:
  - proofer is shown the typing/fixing/proofing interface as with typists; instructions may differ

Publishing Flow:
----------------
- publishers can batch-publish all defs with NEED_PUBLISH status; all such defs get status PUBLISHED
+ publishers can PREVIEW a def (i.e. get it rendered by THE SAME mechanism that would ultimately render it in the published dictionary)
- publishers can view a def with NEED_PUBLISH status, and:
  - demote it to any other status (NEED_FIXUP, NEED_PROOF) with any proof_round_passed value they choose
  + publish the def, changing its status to PUBLISHED
- publishers can view any def with PUBLISHED status and DEMOTE it as above.

The Dictionary:
---------------
- The (publicly-accessible-at-some-point) partial dictionary is a dynamic page (or set of pages) displaying a sorted[see below] list of all defs with PUBLISHED status

